@startuml covid sos datamodel

enum Layer2Type {
  ZK_SYNC = 'ZK_SYNC'
  LOOPRING = 'LRC'
}

enum OperationType {
  Deposit = "Deposit",
  Transfer = "Transfer",
  Withdrawal = "Withdrawal",
}

class Operation {
  toAddress: string
  amount: string
  fee: string
}

class Deposit {
}
Operation <|-- Deposit
class TokenDeposit {
  tokenSymbol: string
  approveForErc20: bool
}
Deposit <|-- TokenDeposit

class Transfer {
}
Operation <|-- Transfer
class TokenTransfer {
  tokenSymbol: string
}
Transfer <|-- TokenTransfer

class Withdrawal {
}
Operation <|-- Withdrawal
class TokenWithdrawal {
  tokenSymbol: string
}
Withdrawal <|-- TokenWithdrawal


interface Layer2Manager {
  getBalance(layer2Type: Layer2Type, tokenSymbol: string): string
  getBalanceVerified(layer2Type: Layer2Type, tokenSymbol: string): string

  getProviderByLayer2Type(layer2Type: Layer2Type): Layer2Provider
  getProviderByName(name: string)
  registerProvider(provider: Layer2Provider): boolean
  getProviders(): Set<Layer2Provider>
}

interface Layer2Provider {
  constructor(wallet: Wallet)

  + getName(): string
  + getDescription(): string
  + getWallet(): Wallet
  + getBalance(tokenSymbol: string): string
  + getBalanceVerified(tokenSymbol: string): string
  + getSupportedLayer2Type(): Layer2Type
  + getSupportedTokens(): Set<string>

  + performDeposit(deposit: Deposit): DepositResult
  + performTransfer(transfer: Transfer): TransferResult
  + performWithdrawal(withdrawal: Withdrawal): WithdrawalResult
}

class OperationResult {
  async getReceipt(): Receipt
  async getReceiptVerify(): Receipt
}

class DepositResult {
}
OperationResult <|-- DepositResult

class TransferResult {
}
OperationResult <|-- TransferResult

class WithdrawalResult {
}
OperationResult <|-- WithdrawalResult

class Receipt() {
  isVerified(): boolean
}

@enduml
